<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:pageModels="clr-namespace:ITSF_App.PageModels"
             xmlns:models="clr-namespace:ITSF_App.Models"
             xmlns:pages="clr-namespace:ITSF_App.Pages"
             xmlns:sf="clr-namespace:Syncfusion.Maui.Toolkit.TextInputLayout;assembly=Syncfusion.Maui.Toolkit"
             xmlns:controls="clr-namespace:ITSF_App.Pages.Controls"
             xmlns:fonts="clr-namespace:Fonts"
             x:Class="ITSF_App.Pages.ProjectDetailPage"
             x:DataType="pageModels:ProjectDetailPageModel"
             Title="Project">

    <!-- Resources for the page -->
    <ContentPage.Resources>
        <!-- DataTemplate for a normal tag (non-selected) -->
        <DataTemplate x:Key="NormalTagTemplate" x:DataType="models:Tag">
            <Border StrokeShape="RoundRectangle 22" HeightRequest="44" StrokeThickness="0"
                    Background="{AppThemeBinding Light={StaticResource LightSecondaryBackground},Dark={StaticResource DarkSecondaryBackground}}" 
                    Padding="{OnPlatform '18,0,18,8',Android='18,0,18,0'}">
                <Border.GestureRecognizers>
                    <!-- Command binding for tag toggle behavior -->
                    <TapGestureRecognizer Command="{Binding ToggleTagCommand, Source={RelativeSource AncestorType={x:Type pageModels:ProjectDetailPageModel}}, x:DataType=pageModels:ProjectDetailPageModel}" 
                                          CommandParameter="{Binding .}"/>
                </Border.GestureRecognizers>
                <Label Text="{Binding Title}"
                       TextColor="{AppThemeBinding Light={StaticResource DarkOnLightBackground},Dark={StaticResource LightOnDarkBackground}}"
                       FontSize="{OnIdiom 16,Desktop=18}" VerticalOptions="Center" VerticalTextAlignment="Center"/>
            </Border>
        </DataTemplate>

        <!-- DataTemplate for a selected tag -->
        <DataTemplate x:Key="SelectedTagTemplate" x:DataType="models:Tag">
            <Border StrokeShape="RoundRectangle 22" HeightRequest="44" StrokeThickness="0"
                    Background="{Binding DisplayColor}" 
                    Padding="{OnPlatform '18,0,18,8',Android='18,0,18,0'}">
                <Border.GestureRecognizers>
                    <!-- Command binding for tag toggle behavior -->
                    <TapGestureRecognizer Command="{Binding ToggleTagCommand, Source={RelativeSource AncestorType={x:Type pageModels:ProjectDetailPageModel}}, x:DataType=pageModels:ProjectDetailPageModel}" 
                                          CommandParameter="{Binding .}"/>
                </Border.GestureRecognizers>
                <Label Text="{Binding Title}"
                       TextColor="{AppThemeBinding Light={StaticResource LightBackground},Dark={StaticResource DarkBackground}}" 
                       FontSize="{OnIdiom 16,Desktop=18}" VerticalOptions="Center" VerticalTextAlignment="Center"/>
            </Border>
        </DataTemplate>

        <!-- ChipDataTemplateSelector for selecting the appropriate template for each tag -->
        <pages:ChipDataTemplateSelector 
            x:Key="ChipDataTemplateSelector"
            NormalTagTemplate="{StaticResource NormalTagTemplate}"
            SelectedTagTemplate="{StaticResource SelectedTagTemplate}"/>
    </ContentPage.Resources>

    <!-- Toolbar items (buttons at the top of the page) -->
    <ContentPage.ToolbarItems>
        <ToolbarItem Text="Delete"
                     Command="{Binding DeleteCommand}"
                     Order="Primary"
                     Priority="0"
                     IconImageSource="{StaticResource IconDelete}" />
    </ContentPage.ToolbarItems>

    <!-- Main content layout -->
    <Grid>
        <ScrollView>
            <VerticalStackLayout Padding="{StaticResource LayoutPadding}" Spacing="{StaticResource LayoutSpacing}">
                <!-- Text input for 'Name' -->
                <sf:SfTextInputLayout Hint="Name">
                    <Entry Text="{Binding Name}" />
                </sf:SfTextInputLayout>

                <!-- Text input for 'Description' -->
                <sf:SfTextInputLayout Hint="Description">
                    <Entry Text="{Binding Description}" />
                </sf:SfTextInputLayout>

                <!-- Picker for selecting 'Category' -->
                <sf:SfTextInputLayout Hint="Category">
                    <Picker ItemsSource="{Binding Categories}"
                            SelectedItem="{Binding Category}"
                            SelectedIndex="{Binding CategoryIndex}" />
                </sf:SfTextInputLayout>

                <!-- Label and CollectionView for selecting 'Icon' -->
                <Label Text="Icon" Style="{StaticResource Title2}"/>
                <CollectionView HeightRequest="44" Margin="0,0,0,15"
                                SelectionMode="Single"
                                SelectedItem="{Binding Icon}"
                                ItemsSource="{Binding Icons}">
                    <CollectionView.ItemTemplate>
                        <DataTemplate x:DataType="x:String">
                            <Grid RowDefinitions="Auto,4" RowSpacing="{StaticResource size60}">
                                <!-- VisualStateManager for managing the icon selection state -->
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualState x:Name="Normal">
                                            <VisualState.Setters>
                                                <Setter Property="BackgroundColor" Value="Transparent"/>
                                                <Setter TargetName="SelectedIndicator" Property="BoxView.IsVisible" Value="False"/>
                                            </VisualState.Setters>
                                        </VisualState>
                                        <VisualState x:Name="Selected">
                                            <VisualState.Setters>
                                                <Setter Property="BackgroundColor" Value="Transparent"/>
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter TargetName="SelectedIndicator" Property="BoxView.IsVisible" Value="True"/>
                                            </VisualState.Setters>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                
                                <!-- Label displaying the icon -->
                                <Label Text="{Binding .}" x:Name="IconImage"
                                       FontFamily="{x:Static fonts:FluentUI.FontFamily}" FontSize="24" 
                                       VerticalOptions="Center" HorizontalOptions="Center"
                                       TextColor="{AppThemeBinding Light={StaticResource DarkOnLightBackground},Dark={StaticResource LightOnDarkBackground}}"/>
                                <BoxView x:Name="SelectedIndicator" Color="{StaticResource Primary}" HeightRequest="4" HorizontalOptions="Fill" Grid.Row="1"/>
                            </Grid>                            
                        </DataTemplate>
                    </CollectionView.ItemTemplate>
                    <CollectionView.ItemsLayout>
                        <!-- Layout for horizontally arranging icons -->
                        <LinearItemsLayout Orientation="Horizontal" ItemSpacing="{StaticResource LayoutSpacing}"/>
                    </CollectionView.ItemsLayout>
                </CollectionView>
                
                <!-- Label and horizontal ScrollView for displaying tags -->
                <Label Text="Tags" Style="{StaticResource Title2}"/>
                <ScrollView Orientation="Horizontal">
                    <HorizontalStackLayout Spacing="{StaticResource LayoutSpacing}" HeightRequest="44" Margin="0,0,0,15"
                                          BindableLayout.ItemsSource="{Binding AllTags}" 
                                          BindableLayout.ItemTemplateSelector="{StaticResource ChipDataTemplateSelector}"/>
                </ScrollView>

                <!-- Save button -->
                <Button Text="Save" HeightRequest="{OnIdiom 44, Desktop=60}"
                        Command="{Binding SaveCommand}" />

                <!-- Grid for displaying the 'Tasks' label and Clean tasks button -->
                <Grid HeightRequest="44">
                    <Label Text="Tasks" Style="{StaticResource Title2}" VerticalOptions="Center"/>
                    <ImageButton Source="{StaticResource IconClean}"
                                 HorizontalOptions="End"
                                 VerticalOptions="Center"
                                 Aspect="Center"
                                 HeightRequest="44" WidthRequest="44"
                                 IsVisible="{Binding HasCompletedTasks}"
                                 Command="{Binding CleanTasksCommand}" />
                </Grid>

                <!-- Vertical stack layout for displaying tasks -->
                <VerticalStackLayout Spacing="{StaticResource LayoutSpacing}"
                                     BindableLayout.ItemsSource="{Binding Tasks}">
                    <BindableLayout.ItemTemplate>
                        <DataTemplate>
                            <!-- Custom task view control -->
                            <controls:TaskView TaskCompletedCommand="{Binding TaskCompletedCommand, Source={RelativeSource AncestorType={x:Type pageModels:ProjectDetailPageModel}}, x:DataType=pageModels:ProjectDetailPageModel}" />
                        </DataTemplate>
                    </BindableLayout.ItemTemplate>
                </VerticalStackLayout>
            </VerticalStackLayout>
        </ScrollView>

        <!-- Add button for adding a new task -->
        <controls:AddButton Command="{Binding AddTaskCommand}" />
    </Grid>
</ContentPage>